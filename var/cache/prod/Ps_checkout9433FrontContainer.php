<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class Ps_checkout9433FrontContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'PrestaShop\\ModuleLibCacheDirectoryProvider\\Cache\\CacheDirectoryProvider' => 'getCacheDirectoryProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Adapter\\LanguageAdapter' => 'getLanguageAdapterService',
            'PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\CheckoutClientConfigurationBuilder' => 'getCheckoutClientConfigurationBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\MaaslandHttpClientConfigurationBuilder' => 'getMaaslandHttpClientConfigurationBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Builder\\ModuleLink\\ModuleLinkBuilder' => 'getModuleLinkBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CheckoutChecker' => 'getCheckoutCheckerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\CancelCheckoutCommandHandler' => 'getCancelCheckoutCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SaveCheckoutCommandHandler' => 'getSaveCheckoutCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SavePayPalOrderStatusCommandHandler' => 'getSavePayPalOrderStatusCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\UpdatePaymentMethodSelectedCommandHandler' => 'getUpdatePaymentMethodSelectedCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\EventSubscriber\\CheckoutEventSubscriber' => 'getCheckoutEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\CommandBusFactory' => 'getCommandBusFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\QueryBusFactory' => 'getQueryBusFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Configuration\\BatchConfigurationProcessor' => 'getBatchConfigurationProcessorService',
            'PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration' => 'getPrestaShopConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfigurationOptionsResolver' => 'getPrestaShopConfigurationOptionsResolverService',
            'PrestaShop\\Module\\PrestashopCheckout\\Context\\ContextStateManager' => 'getContextStateManagerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext' => 'getPrestaShopContextService',
            'PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env' => 'getEnvService',
            'PrestaShop\\Module\\PrestashopCheckout\\Environment\\EnvLoader' => 'getEnvLoaderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherAdapter' => 'getSymfonyEventDispatcherAdapterService',
            'PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherFactory' => 'getSymfonyEventDispatcherFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\ExpressCheckout\\ExpressCheckoutConfiguration' => 'getExpressCheckoutConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollection' => 'getFundingSourceCollectionService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollectionBuilder' => 'getFundingSourceCollectionBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfiguration' => 'getFundingSourceConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfigurationRepository' => 'getFundingSourceConfigurationRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceEligibilityConstraint' => 'getFundingSourceEligibilityConstraintService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourcePresenter' => 'getFundingSourcePresenterService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceProvider' => 'getFundingSourceProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider' => 'getFundingSourceTranslationProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Http\\CheckoutHttpClient' => 'getCheckoutHttpClientService',
            'PrestaShop\\Module\\PrestashopCheckout\\Http\\HttpClientFactory' => 'getHttpClientFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient' => 'getMaaslandHttpClientService',
            'PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration' => 'getLoggerConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerDirectory' => 'getLoggerDirectoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFactory' => 'getLoggerFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFilename' => 'getLoggerFilenameService',
            'PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerHandlerFactory' => 'getLoggerHandlerFactoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\LiveStep' => 'getLiveStepService',
            'PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\ValueBanner' => 'getValueBannerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\AddOrderPaymentCommandHandler' => 'getAddOrderPaymentCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\CreateOrderCommandHandler' => 'getCreateOrderCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler' => 'getUpdateOrderStatusCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\EventSubscriber\\OrderEventSubscriber' => 'getOrderEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\Matrice\\CommandHandler\\UpdateOrderMatriceCommandHandler' => 'getUpdateOrderMatriceCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForApprovalReversedQueryHandler' => 'getGetOrderForApprovalReversedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentCompletedQueryHandler' => 'getGetOrderForPaymentCompletedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentDeniedQueryHandler' => 'getGetOrderForPaymentDeniedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentPendingQueryHandler' => 'getGetOrderForPaymentPendingQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentRefundedQueryHandler' => 'getGetOrderForPaymentRefundedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentReversedQueryHandler' => 'getGetOrderForPaymentReversedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\Service\\CheckOrderAmount' => 'getCheckOrderAmountService',
            'PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper' => 'getOrderStateMapperService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\AppleSetup' => 'getAppleSetupService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Builder\\ApplePayPaymentRequestBuilder' => 'getApplePayPaymentRequestBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Query\\GetApplePayPaymentRequestQueryHandler' => 'getGetApplePayPaymentRequestQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Customer\\CommandHandler\\SavePayPalCustomerCommandHandler' => 'getSavePayPalCustomerCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Builder\\GooglePayTransactionInfoBuilder' => 'getGooglePayTransactionInfoBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Query\\GetGooglePayTransactionInfoQueryHandler' => 'getGetGooglePayTransactionInfoQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\OAuthService' => 'getOAuthServiceService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\Query\\GetPayPalGetUserIdTokenQueryHandler' => 'getGetPayPalGetUserIdTokenQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CheckTransitionPayPalOrderStatusService' => 'getCheckTransitionPayPalOrderStatusServiceService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CapturePayPalOrderCommandHandler' => 'getCapturePayPalOrderCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CreatePayPalOrderCommandHandler' => 'getCreatePayPalOrderCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\SavePayPalOrderCommandHandler' => 'getSavePayPalOrderCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\UpdatePayPalOrderCommandHandler' => 'getUpdatePayPalOrderCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventProcessor\\PayPalOrderEventProcessor' => 'getPayPalOrderEventProcessorService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventSubscriber\\PayPalOrderEventSubscriber' => 'getPayPalOrderEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderStatus' => 'getPayPalOrderStatusService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderSummaryViewBuilder' => 'getPayPalOrderSummaryViewBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderTranslationProvider' => 'getPayPalOrderTranslationProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetCurrentPayPalOrderStatusQueryHandler' => 'getGetCurrentPayPalOrderStatusQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCartIdQueryHandler' => 'getGetPayPalOrderForCartIdQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCheckoutCompletedQueryHandler' => 'getGetPayPalOrderForCheckoutCompletedQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForOrderConfirmationQueryHandler' => 'getGetPayPalOrderForOrderConfirmationQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderQueryHandler' => 'getGetPayPalOrderQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration' => 'getPayPalConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalOrderProvider' => 'getPayPalOrderProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalPayLaterConfiguration' => 'getPayPalPayLaterConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\DeletePaymentTokenCommandHandler' => 'getDeletePaymentTokenCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\SavePaymentTokenCommandHandler' => 'getSavePaymentTokenCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\EventSubscriber\\PaymentMethodTokenEventSubscriber' => 'getPaymentMethodTokenEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\PaymentMethodTokenService' => 'getPaymentMethodTokenServiceService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Query\\GetCustomerPaymentTokensQueryHandler' => 'getGetCustomerPaymentTokensQueryHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\CheckTransitionPayPalCaptureStatusService' => 'getCheckTransitionPayPalCaptureStatusServiceService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\EventSubscriber\\PayPalCaptureEventSubscriber' => 'getPayPalCaptureEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\CommandHandler\\RefundPayPalCaptureCommandHandler' => 'getRefundPayPalCaptureCommandHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\EventSubscriber\\PayPalRefundEventSubscriber' => 'getPayPalRefundEventSubscriberService',
            'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Sdk\\PayPalSdkConfigurationBuilder' => 'getPayPalSdkConfigurationBuilderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ConfigurationModule' => 'getConfigurationModuleService',
            'PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ContextModule' => 'getContextModuleService',
            'PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\PaypalModule' => 'getPaypalModuleService',
            'PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\StorePresenter' => 'getStorePresenterService',
            'PrestaShop\\Module\\PrestashopCheckout\\Provider\\PaymentMethodLogoProvider' => 'getPaymentMethodLogoProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\CountryRepository' => 'getCountryRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCodeRepository' => 'getPayPalCodeRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository' => 'getPayPalCustomerRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository' => 'getPayPalOrderRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository' => 'getPaymentTokenRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository' => 'getPsAccountRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository' => 'getPsCheckoutCartRepositoryService',
            'PrestaShop\\Module\\PrestashopCheckout\\Routing\\Router' => 'getRouterService',
            'PrestaShop\\Module\\PrestashopCheckout\\ShopContext' => 'getShopContextService',
            'PrestaShop\\Module\\PrestashopCheckout\\Shop\\ShopProvider' => 'getShopProviderService',
            'PrestaShop\\Module\\PrestashopCheckout\\System\\SystemConfiguration' => 'getSystemConfigurationService',
            'PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations' => 'getTranslationsService',
            'PrestaShop\\Module\\PrestashopCheckout\\Validator\\BatchConfigurationValidator' => 'getBatchConfigurationValidatorService',
            'PrestaShop\\Module\\PrestashopCheckout\\Validator\\FrontControllerValidator' => 'getFrontControllerValidatorService',
            'PrestaShop\\Module\\PrestashopCheckout\\Validator\\MerchantValidator' => 'getMerchantValidatorService',
            'PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookEventConfigurationUpdatedHandler' => 'getWebhookEventConfigurationUpdatedHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookHandler' => 'getWebhookHandlerService',
            'PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookSecretTokenService' => 'getWebhookSecretTokenServiceService',
            'ps_accounts.facade' => 'getPsAccounts_FacadeService',
            'ps_accounts.installer' => 'getPsAccounts_InstallerService',
            'ps_checkout.bus.command' => 'getPsCheckout_Bus_CommandService',
            'ps_checkout.bus.query' => 'getPsCheckout_Bus_QueryService',
            'ps_checkout.cache.array.paypal.capture' => 'getPsCheckout_Cache_Array_Paypal_CaptureService',
            'ps_checkout.cache.array.paypal.order' => 'getPsCheckout_Cache_Array_Paypal_OrderService',
            'ps_checkout.cache.filesystem.paypal.capture' => 'getPsCheckout_Cache_Filesystem_Paypal_CaptureService',
            'ps_checkout.cache.filesystem.paypal.order' => 'getPsCheckout_Cache_Filesystem_Paypal_OrderService',
            'ps_checkout.cache.order' => 'getPsCheckout_Cache_OrderService',
            'ps_checkout.cache.paypal.capture' => 'getPsCheckout_Cache_Paypal_CaptureService',
            'ps_checkout.cache.paypal.order' => 'getPsCheckout_Cache_Paypal_OrderService',
            'ps_checkout.cache.pscheckoutcart' => 'getPsCheckout_Cache_PscheckoutcartService',
            'ps_checkout.db' => 'getPsCheckout_DbService',
            'ps_checkout.event.dispatcher.adapter2' => 'getPsCheckout_Event_Dispatcher_Adapter2Service',
            'ps_checkout.event.dispatcher.symfony' => 'getPsCheckout_Event_Dispatcher_SymfonyService',
            'ps_checkout.event.dispatcher.symfony2' => 'getPsCheckout_Event_Dispatcher_Symfony2Service',
            'ps_checkout.http.client' => 'getPsCheckout_Http_ClientService',
            'ps_checkout.logger' => 'getPsCheckout_LoggerService',
            'ps_checkout.logger.handler' => 'getPsCheckout_Logger_HandlerService',
            'ps_checkout.module' => 'getPsCheckout_ModuleService',
            'ps_checkout.module.version' => 'getPsCheckout_Module_VersionService',
            'ps_checkout.repository.paypal.code' => 'getPsCheckout_Repository_Paypal_CodeService',
        ];
        $this->aliases = [
            'Db $db' => 'ps_checkout.db',
            'PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\CommandBusInterface' => 'ps_checkout.bus.command',
            'PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\QueryBusInterface' => 'ps_checkout.bus.query',
            'Ps_checkout $psCheckout' => 'ps_checkout.module',
            'Psr\\Log\\LoggerInterface $psCheckoutLogger' => 'ps_checkout.logger',
            'Symfony\\Component\\Cache\\Adapter\\ArrayAdapter $cartPrestaShopCache' => 'ps_checkout.cache.pscheckoutcart',
            'Symfony\\Component\\Cache\\Adapter\\ArrayAdapter $orderCache' => 'ps_checkout.cache.order',
            'Symfony\\Component\\Cache\\Adapter\\ChainAdapter $capturePayPalCache' => 'ps_checkout.cache.paypal.capture',
            'Symfony\\Component\\Cache\\Adapter\\ChainAdapter $orderPayPalCache' => 'ps_checkout.cache.paypal.order',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    /**
     * Gets the public 'PrestaShop\ModuleLibCacheDirectoryProvider\Cache\CacheDirectoryProvider' shared service.
     *
     * @return \PrestaShop\ModuleLibCacheDirectoryProvider\Cache\CacheDirectoryProvider
     */
    protected static function getCacheDirectoryProviderService($container)
    {
        return $container->services['PrestaShop\\ModuleLibCacheDirectoryProvider\\Cache\\CacheDirectoryProvider'] = new \PrestaShop\ModuleLibCacheDirectoryProvider\Cache\CacheDirectoryProvider('9.0.0', '/home/playfunc/tcg', false);
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Adapter\LanguageAdapter' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Adapter\LanguageAdapter
     */
    protected static function getLanguageAdapterService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Adapter\\LanguageAdapter'] = new \PrestaShop\Module\PrestashopCheckout\Adapter\LanguageAdapter();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Builder\Configuration\CheckoutClientConfigurationBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Builder\Configuration\CheckoutClientConfigurationBuilder
     */
    protected static function getCheckoutClientConfigurationBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\CheckoutClientConfigurationBuilder'] = new \PrestaShop\Module\PrestashopCheckout\Builder\Configuration\CheckoutClientConfigurationBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env'] ?? self::getEnvService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Routing\\Router'] ??= new \PrestaShop\Module\PrestashopCheckout\Routing\Router()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ShopContext'] ?? self::getShopContextService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository'] ?? self::getPsAccountRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] ?? self::getLoggerConfigurationService($container)), ($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Builder\Configuration\MaaslandHttpClientConfigurationBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Builder\Configuration\MaaslandHttpClientConfigurationBuilder
     */
    protected static function getMaaslandHttpClientConfigurationBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\MaaslandHttpClientConfigurationBuilder'] = new \PrestaShop\Module\PrestashopCheckout\Builder\Configuration\MaaslandHttpClientConfigurationBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env'] ?? self::getEnvService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Routing\\Router'] ??= new \PrestaShop\Module\PrestashopCheckout\Routing\Router()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ShopContext'] ?? self::getShopContextService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository'] ?? self::getPsAccountRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] ?? self::getLoggerConfigurationService($container)), ($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Builder\ModuleLink\ModuleLinkBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Builder\ModuleLink\ModuleLinkBuilder
     */
    protected static function getModuleLinkBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\ModuleLink\\ModuleLinkBuilder'] = new \PrestaShop\Module\PrestashopCheckout\Builder\ModuleLink\ModuleLinkBuilder();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\CheckoutChecker' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\CheckoutChecker
     */
    protected static function getCheckoutCheckerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CheckoutChecker'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\CheckoutChecker(($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\CancelCheckoutCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\CancelCheckoutCommandHandler
     */
    protected static function getCancelCheckoutCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\CancelCheckoutCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\CancelCheckoutCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SaveCheckoutCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SaveCheckoutCommandHandler
     */
    protected static function getSaveCheckoutCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SaveCheckoutCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SaveCheckoutCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SavePayPalOrderStatusCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SavePayPalOrderStatusCommandHandler
     */
    protected static function getSavePayPalOrderStatusCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SavePayPalOrderStatusCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\SavePayPalOrderStatusCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\UpdatePaymentMethodSelectedCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\UpdatePaymentMethodSelectedCommandHandler
     */
    protected static function getUpdatePaymentMethodSelectedCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\UpdatePaymentMethodSelectedCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\CommandHandler\UpdatePaymentMethodSelectedCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Checkout\EventSubscriber\CheckoutEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Checkout\EventSubscriber\CheckoutEventSubscriber
     */
    protected static function getCheckoutEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\EventSubscriber\\CheckoutEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\Checkout\EventSubscriber\CheckoutEventSubscriber(($container->services['ps_checkout.bus.query'] ?? self::getPsCheckout_Bus_QueryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CheckoutChecker'] ?? self::getCheckoutCheckerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\UpdatePaymentMethodSelectedCommandHandler'] ?? self::getUpdatePaymentMethodSelectedCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\CreateOrderCommandHandler'] ?? self::getCreateOrderCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CapturePayPalOrderCommandHandler'] ?? self::getCapturePayPalOrderCommandHandlerService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\CommandBus\CommandBusFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\CommandBus\CommandBusFactory
     */
    protected static function getCommandBusFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\CommandBusFactory'] = new \PrestaShop\Module\PrestashopCheckout\CommandBus\CommandBusFactory(($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)), ['PrestaShop\\Module\\PrestashopCheckout\\Order\\Command\\AddOrderPaymentCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\AddOrderPaymentCommandHandler'] ?? self::getAddOrderPaymentCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Command\\CreateOrderCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\CreateOrderCommandHandler'] ?? self::getCreateOrderCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Command\\UpdateOrderStatusCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler())], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Matrice\\Command\\UpdateOrderMatriceCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\Matrice\\CommandHandler\\UpdateOrderMatriceCommandHandler'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\Matrice\CommandHandler\UpdateOrderMatriceCommandHandler())], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Command\\CreatePayPalOrderCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CreatePayPalOrderCommandHandler'] ?? self::getCreatePayPalOrderCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Command\\UpdatePayPalOrderCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\UpdatePayPalOrderCommandHandler'] ?? self::getUpdatePayPalOrderCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Command\\CapturePayPalOrderCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CapturePayPalOrderCommandHandler'] ?? self::getCapturePayPalOrderCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\Command\\CancelCheckoutCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\CancelCheckoutCommandHandler'] ?? self::getCancelCheckoutCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\Command\\SaveCheckoutCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SaveCheckoutCommandHandler'] ?? self::getSaveCheckoutCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\Command\\SavePayPalOrderStatusCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SavePayPalOrderStatusCommandHandler'] ?? self::getSavePayPalOrderStatusCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Checkout\\Command\\UpdatePaymentMethodSelectedCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\UpdatePaymentMethodSelectedCommandHandler'] ?? self::getUpdatePaymentMethodSelectedCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\Command\\RefundPayPalCaptureCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\CommandHandler\\RefundPayPalCaptureCommandHandler'] ?? self::getRefundPayPalCaptureCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Command\\SavePaymentTokenCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\SavePaymentTokenCommandHandler'] ?? self::getSavePaymentTokenCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Command\\DeletePaymentTokenCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\DeletePaymentTokenCommandHandler'] ?? self::getDeletePaymentTokenCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Customer\\Command\\SavePayPalCustomerCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Customer\\CommandHandler\\SavePayPalCustomerCommandHandler'] ?? self::getSavePayPalCustomerCommandHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Command\\SavePayPalOrderCommand' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\SavePayPalOrderCommandHandler'] ?? self::getSavePayPalOrderCommandHandlerService($container))]]);
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\CommandBus\QueryBusFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\CommandBus\QueryBusFactory
     */
    protected static function getQueryBusFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\QueryBusFactory'] = new \PrestaShop\Module\PrestashopCheckout\CommandBus\QueryBusFactory(($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)), ['PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForPaymentCompletedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentCompletedQueryHandler'] ?? self::getGetOrderForPaymentCompletedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForPaymentDeniedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentDeniedQueryHandler'] ?? self::getGetOrderForPaymentDeniedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForPaymentPendingQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentPendingQueryHandler'] ?? self::getGetOrderForPaymentPendingQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForPaymentRefundedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentRefundedQueryHandler'] ?? self::getGetOrderForPaymentRefundedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForPaymentReversedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentReversedQueryHandler'] ?? self::getGetOrderForPaymentReversedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\Order\\Query\\GetOrderForApprovalReversedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForApprovalReversedQueryHandler'] ?? self::getGetOrderForApprovalReversedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Query\\GetPayPalOrderForCartIdQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCartIdQueryHandler'] ?? self::getGetPayPalOrderForCartIdQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Query\\GetCurrentPayPalOrderStatusQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetCurrentPayPalOrderStatusQueryHandler'] ?? self::getGetCurrentPayPalOrderStatusQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Query\\GetPayPalOrderQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderQueryHandler'] ?? self::getGetPayPalOrderQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Query\\GetPayPalOrderForCheckoutCompletedQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCheckoutCompletedQueryHandler'] ?? self::getGetPayPalOrderForCheckoutCompletedQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\Query\\GetPayPalOrderForOrderConfirmationQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForOrderConfirmationQueryHandler'] ?? self::getGetPayPalOrderForOrderConfirmationQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Query\\GetCustomerPaymentTokensQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Query\\GetCustomerPaymentTokensQueryHandler'] ?? self::getGetCustomerPaymentTokensQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\Query\\GetPayPalGetUserIdTokenQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\Query\\GetPayPalGetUserIdTokenQueryHandler'] ?? self::getGetPayPalGetUserIdTokenQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Query\\GetGooglePayTransactionInfoQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Query\\GetGooglePayTransactionInfoQueryHandler'] ?? self::getGetGooglePayTransactionInfoQueryHandlerService($container))], 'PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Query\\GetApplePayPaymentRequestQuery' => [($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Query\\GetApplePayPaymentRequestQueryHandler'] ?? self::getGetApplePayPaymentRequestQueryHandlerService($container))]]);
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Configuration\BatchConfigurationProcessor' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Configuration\BatchConfigurationProcessor
     */
    protected static function getBatchConfigurationProcessorService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\BatchConfigurationProcessor'] = new \PrestaShop\Module\PrestashopCheckout\Configuration\BatchConfigurationProcessor(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfiguration
     */
    protected static function getPrestaShopConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfigurationOptionsResolver'] ?? self::getPrestaShopConfigurationOptionsResolverService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfigurationOptionsResolver' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfigurationOptionsResolver
     */
    protected static function getPrestaShopConfigurationOptionsResolverService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfigurationOptionsResolver'] = new \PrestaShop\Module\PrestashopCheckout\Configuration\PrestaShopConfigurationOptionsResolver(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Shop\\ShopProvider'] ??= new \PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider())->getIdentifier());
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Context\ContextStateManager' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Context\ContextStateManager
     */
    protected static function getContextStateManagerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\ContextStateManager'] = new \PrestaShop\Module\PrestashopCheckout\Context\ContextStateManager();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext
     */
    protected static function getPrestaShopContextService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] = new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Environment\Env' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Environment\Env
     */
    protected static function getEnvService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env'] = new \PrestaShop\Module\PrestashopCheckout\Environment\Env(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Environment\EnvLoader' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Environment\EnvLoader
     */
    protected static function getEnvLoaderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\EnvLoader'] = new \PrestaShop\Module\PrestashopCheckout\Environment\EnvLoader();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherAdapter' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherAdapter
     */
    protected static function getSymfonyEventDispatcherAdapterService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherAdapter'] = new \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherAdapter(($container->services['ps_checkout.event.dispatcher.symfony'] ?? self::getPsCheckout_Event_Dispatcher_SymfonyService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherFactory
     */
    protected static function getSymfonyEventDispatcherFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherFactory'] = new \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherFactory(($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] ?? self::getLoggerConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\ExpressCheckout\ExpressCheckoutConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\ExpressCheckout\ExpressCheckoutConfiguration
     */
    protected static function getExpressCheckoutConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\ExpressCheckout\\ExpressCheckoutConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\ExpressCheckout\ExpressCheckoutConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollection' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollection
     */
    protected static function getFundingSourceCollectionService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollection'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollection(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollectionBuilder'] ?? self::getFundingSourceCollectionBuilderService($container))->create());
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollectionBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollectionBuilder
     */
    protected static function getFundingSourceCollectionBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollectionBuilder'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceCollectionBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfiguration'] ?? self::getFundingSourceConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceEligibilityConstraint'] ??= new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceEligibilityConstraint()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfiguration
     */
    protected static function getFundingSourceConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfigurationRepository'] ?? self::getFundingSourceConfigurationRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfigurationRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfigurationRepository
     */
    protected static function getFundingSourceConfigurationRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfigurationRepository'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceConfigurationRepository(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['ps_checkout.db'] ?? self::getPsCheckout_DbService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceEligibilityConstraint' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceEligibilityConstraint
     */
    protected static function getFundingSourceEligibilityConstraintService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceEligibilityConstraint'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceEligibilityConstraint();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourcePresenter' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourcePresenter
     */
    protected static function getFundingSourcePresenterService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourcePresenter'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourcePresenter(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider'] ?? self::getFundingSourceTranslationProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\CountryRepository'] ??= new \PrestaShop\Module\PrestashopCheckout\Repository\CountryRepository()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Provider\\PaymentMethodLogoProvider'] ?? self::getPaymentMethodLogoProviderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceProvider
     */
    protected static function getFundingSourceProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceProvider'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceProvider(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceCollectionBuilder'] ?? self::getFundingSourceCollectionBuilderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourcePresenter'] ?? self::getFundingSourcePresenterService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceTranslationProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceTranslationProvider
     */
    protected static function getFundingSourceTranslationProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider'] = new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceTranslationProvider(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Http\CheckoutHttpClient' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Http\CheckoutHttpClient
     */
    protected static function getCheckoutHttpClientService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\CheckoutHttpClient'] = new \PrestaShop\Module\PrestashopCheckout\Http\CheckoutHttpClient(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\CheckoutClientConfigurationBuilder'] ?? self::getCheckoutClientConfigurationBuilderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Http\HttpClientFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Http\HttpClientFactory
     */
    protected static function getHttpClientFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\HttpClientFactory'] = new \PrestaShop\Module\PrestashopCheckout\Http\HttpClientFactory();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Http\MaaslandHttpClient' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Http\MaaslandHttpClient
     */
    protected static function getMaaslandHttpClientService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient'] = new \PrestaShop\Module\PrestashopCheckout\Http\MaaslandHttpClient(($container->services['ps_checkout.http.client'] ?? self::getPsCheckout_Http_ClientService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Logger\LoggerConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Logger\LoggerConfiguration
     */
    protected static function getLoggerConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Logger\LoggerDirectory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Logger\LoggerDirectory
     */
    protected static function getLoggerDirectoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerDirectory'] = new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerDirectory('9.0.0', '/home/playfunc/tcg');
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Logger\LoggerFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Logger\LoggerFactory
     */
    protected static function getLoggerFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFactory'] = new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerFactory(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container))->name, ($container->services['ps_checkout.logger.handler'] ?? self::getPsCheckout_Logger_HandlerService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Logger\LoggerFilename' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Logger\LoggerFilename
     */
    protected static function getLoggerFilenameService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFilename'] = new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerFilename(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container))->name, ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Shop\\ShopProvider'] ??= new \PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider())->getIdentifier());
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Logger\LoggerHandlerFactory' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Logger\LoggerHandlerFactory
     */
    protected static function getLoggerHandlerFactoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerHandlerFactory'] = new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerHandlerFactory(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerDirectory'] ??= new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerDirectory('9.0.0', '/home/playfunc/tcg'))->getPath(), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFilename'] ?? self::getLoggerFilenameService($container))->get(), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] ?? self::getLoggerConfigurationService($container))->getMaxFiles(), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerConfiguration'] ?? self::getLoggerConfigurationService($container))->getLevel());
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\LiveStep' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\LiveStep
     */
    protected static function getLiveStepService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\LiveStep'] = new \PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\LiveStep(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\ValueBanner' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\ValueBanner
     */
    protected static function getValueBannerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\ValueBanner'] = new \PrestaShop\Module\PrestashopCheckout\OnBoarding\Step\ValueBanner(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\AddOrderPaymentCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\AddOrderPaymentCommandHandler
     */
    protected static function getAddOrderPaymentCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\AddOrderPaymentCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\AddOrderPaymentCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider'] ?? self::getFundingSourceTranslationProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\CreateOrderCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\CreateOrderCommandHandler
     */
    protected static function getCreateOrderCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\CreateOrderCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\CreateOrderCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\ContextStateManager'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\ContextStateManager()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper'] ?? self::getOrderStateMapperService($container)), ($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\Service\\CheckOrderAmount'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\Service\CheckOrderAmount()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider'] ?? self::getFundingSourceTranslationProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\EventSubscriber\\OrderEventSubscriber'] ?? self::getOrderEventSubscriberService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler
     */
    protected static function getUpdateOrderStatusCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\EventSubscriber\OrderEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\EventSubscriber\OrderEventSubscriber
     */
    protected static function getOrderEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\EventSubscriber\\OrderEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\Order\EventSubscriber\OrderEventSubscriber(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\Matrice\CommandHandler\UpdateOrderMatriceCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\Matrice\CommandHandler\UpdateOrderMatriceCommandHandler
     */
    protected static function getUpdateOrderMatriceCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\Matrice\\CommandHandler\\UpdateOrderMatriceCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\Matrice\CommandHandler\UpdateOrderMatriceCommandHandler();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForApprovalReversedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForApprovalReversedQueryHandler
     */
    protected static function getGetOrderForApprovalReversedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForApprovalReversedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForApprovalReversedQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentCompletedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentCompletedQueryHandler
     */
    protected static function getGetOrderForPaymentCompletedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentCompletedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentCompletedQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentDeniedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentDeniedQueryHandler
     */
    protected static function getGetOrderForPaymentDeniedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentDeniedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentDeniedQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentPendingQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentPendingQueryHandler
     */
    protected static function getGetOrderForPaymentPendingQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentPendingQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentPendingQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentRefundedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentRefundedQueryHandler
     */
    protected static function getGetOrderForPaymentRefundedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentRefundedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentRefundedQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentReversedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentReversedQueryHandler
     */
    protected static function getGetOrderForPaymentReversedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\QueryHandler\\GetOrderForPaymentReversedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\Order\QueryHandler\GetOrderForPaymentReversedQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\Service\CheckOrderAmount' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\Service\CheckOrderAmount
     */
    protected static function getCheckOrderAmountService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\Service\\CheckOrderAmount'] = new \PrestaShop\Module\PrestashopCheckout\Order\Service\CheckOrderAmount();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Order\State\Service\OrderStateMapper' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Order\State\Service\OrderStateMapper
     */
    protected static function getOrderStateMapperService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper'] = new \PrestaShop\Module\PrestashopCheckout\Order\State\Service\OrderStateMapper(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\AppleSetup' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\AppleSetup
     */
    protected static function getAppleSetupService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\AppleSetup'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\AppleSetup(($container->services['PrestaShop\\Module\\PrestashopCheckout\\System\\SystemConfiguration'] ??= new \PrestaShop\Module\PrestashopCheckout\System\SystemConfiguration()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Builder\ApplePayPaymentRequestBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Builder\ApplePayPaymentRequestBuilder
     */
    protected static function getApplePayPaymentRequestBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Builder\\ApplePayPaymentRequestBuilder'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Builder\ApplePayPaymentRequestBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations'] ?? self::getTranslationsService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Query\GetApplePayPaymentRequestQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Query\GetApplePayPaymentRequestQueryHandler
     */
    protected static function getGetApplePayPaymentRequestQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Query\\GetApplePayPaymentRequestQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\ApplePay\Query\GetApplePayPaymentRequestQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\ApplePay\\Builder\\ApplePayPaymentRequestBuilder'] ?? self::getApplePayPaymentRequestBuilderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Customer\CommandHandler\SavePayPalCustomerCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Customer\CommandHandler\SavePayPalCustomerCommandHandler
     */
    protected static function getSavePayPalCustomerCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Customer\\CommandHandler\\SavePayPalCustomerCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Customer\CommandHandler\SavePayPalCustomerCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository'] ?? self::getPayPalCustomerRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Builder\GooglePayTransactionInfoBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Builder\GooglePayTransactionInfoBuilder
     */
    protected static function getGooglePayTransactionInfoBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Builder\\GooglePayTransactionInfoBuilder'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Builder\GooglePayTransactionInfoBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations'] ?? self::getTranslationsService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Query\GetGooglePayTransactionInfoQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Query\GetGooglePayTransactionInfoQueryHandler
     */
    protected static function getGetGooglePayTransactionInfoQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Query\\GetGooglePayTransactionInfoQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\GooglePay\Query\GetGooglePayTransactionInfoQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\GooglePay\\Builder\\GooglePayTransactionInfoBuilder'] ?? self::getGooglePayTransactionInfoBuilderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\OAuthService' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\OAuthService
     */
    protected static function getOAuthServiceService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\OAuthService'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\OAuthService(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\CheckoutHttpClient'] ?? self::getCheckoutHttpClientService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\Query\GetPayPalGetUserIdTokenQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\Query\GetPayPalGetUserIdTokenQueryHandler
     */
    protected static function getGetPayPalGetUserIdTokenQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\Query\\GetPayPalGetUserIdTokenQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\OAuth\Query\GetPayPalGetUserIdTokenQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\OAuth\\OAuthService'] ?? self::getOAuthServiceService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository'] ?? self::getPayPalCustomerRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\CheckTransitionPayPalOrderStatusService' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CheckTransitionPayPalOrderStatusService
     */
    protected static function getCheckTransitionPayPalOrderStatusServiceService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CheckTransitionPayPalOrderStatusService'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CheckTransitionPayPalOrderStatusService();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CapturePayPalOrderCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CapturePayPalOrderCommandHandler
     */
    protected static function getCapturePayPalOrderCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CapturePayPalOrderCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CapturePayPalOrderCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient'] ?? self::getMaaslandHttpClientService($container)), ($container->services['ps_checkout.event.dispatcher.adapter2'] ?? self::getPsCheckout_Event_Dispatcher_Adapter2Service($container)), ($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository'] ?? self::getPayPalCustomerRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventProcessor\\PayPalOrderEventProcessor'] ?? self::getPayPalOrderEventProcessorService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CreatePayPalOrderCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CreatePayPalOrderCommandHandler
     */
    protected static function getCreatePayPalOrderCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CreatePayPalOrderCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\CreatePayPalOrderCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient'] ?? self::getMaaslandHttpClientService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository'] ?? self::getPayPalCustomerRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventSubscriber\\PayPalOrderEventSubscriber'] ?? self::getPayPalOrderEventSubscriberService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\SavePayPalOrderCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\SavePayPalOrderCommandHandler
     */
    protected static function getSavePayPalOrderCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\SavePayPalOrderCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\SavePayPalOrderCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\UpdatePayPalOrderCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\UpdatePayPalOrderCommandHandler
     */
    protected static function getUpdatePayPalOrderCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\UpdatePayPalOrderCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CommandHandler\UpdatePayPalOrderCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient'] ?? self::getMaaslandHttpClientService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalOrderProvider'] ?? self::getPayPalOrderProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventSubscriber\\PayPalOrderEventSubscriber'] ?? self::getPayPalOrderEventSubscriberService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventProcessor\PayPalOrderEventProcessor' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventProcessor\PayPalOrderEventProcessor
     */
    protected static function getPayPalOrderEventProcessorService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventProcessor\\PayPalOrderEventProcessor'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventProcessor\PayPalOrderEventProcessor(($container->services['ps_checkout.bus.query'] ?? self::getPsCheckout_Bus_QueryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CheckTransitionPayPalOrderStatusService'] ??= new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\CheckTransitionPayPalOrderStatusService()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper'] ?? self::getOrderStateMapperService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\SavePayPalOrderCommandHandler'] ?? self::getSavePayPalOrderCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SaveCheckoutCommandHandler'] ?? self::getSaveCheckoutCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CommandHandler\\SavePayPalOrderStatusCommandHandler'] ?? self::getSavePayPalOrderStatusCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventSubscriber\PayPalOrderEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventSubscriber\PayPalOrderEventSubscriber
     */
    protected static function getPayPalOrderEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventSubscriber\\PayPalOrderEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\EventSubscriber\PayPalOrderEventSubscriber(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\CheckoutChecker'] ?? self::getCheckoutCheckerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\CommandHandler\\CapturePayPalOrderCommandHandler'] ?? self::getCapturePayPalOrderCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventProcessor\\PayPalOrderEventProcessor'] ?? self::getPayPalOrderEventProcessorService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderStatus' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderStatus
     */
    protected static function getPayPalOrderStatusService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderStatus'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderStatus();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderSummaryViewBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderSummaryViewBuilder
     */
    protected static function getPayPalOrderSummaryViewBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderSummaryViewBuilder'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderSummaryViewBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalOrderProvider'] ?? self::getPayPalOrderProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Routing\\Router'] ??= new \PrestaShop\Module\PrestashopCheckout\Routing\Router()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderTranslationProvider'] ?? self::getPayPalOrderTranslationProviderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderTranslationProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderTranslationProvider
     */
    protected static function getPayPalOrderTranslationProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\PayPalOrderTranslationProvider'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\PayPalOrderTranslationProvider(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations'] ?? self::getTranslationsService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceTranslationProvider'] ?? self::getFundingSourceTranslationProviderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetCurrentPayPalOrderStatusQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetCurrentPayPalOrderStatusQueryHandler
     */
    protected static function getGetCurrentPayPalOrderStatusQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetCurrentPayPalOrderStatusQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetCurrentPayPalOrderStatusQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCartIdQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCartIdQueryHandler
     */
    protected static function getGetPayPalOrderForCartIdQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCartIdQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCartIdQueryHandler(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCheckoutCompletedQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCheckoutCompletedQueryHandler
     */
    protected static function getGetPayPalOrderForCheckoutCompletedQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForCheckoutCompletedQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForCheckoutCompletedQueryHandler(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForOrderConfirmationQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForOrderConfirmationQueryHandler
     */
    protected static function getGetPayPalOrderForOrderConfirmationQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderForOrderConfirmationQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderForOrderConfirmationQueryHandler(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderQueryHandler
     */
    protected static function getGetPayPalOrderQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\QueryHandler\\GetPayPalOrderQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\QueryHandler\GetPayPalOrderQueryHandler(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] ?? self::getPsCheckoutCartRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PayPalConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalConfiguration
     */
    protected static function getPayPalConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCodeRepository'] ??= new \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PayPalOrderProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalOrderProvider
     */
    protected static function getPayPalOrderProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalOrderProvider'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalOrderProvider(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PayPalPayLaterConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalPayLaterConfiguration
     */
    protected static function getPayPalPayLaterConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalPayLaterConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PayPalPayLaterConfiguration(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\DeletePaymentTokenCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\DeletePaymentTokenCommandHandler
     */
    protected static function getDeletePaymentTokenCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\DeletePaymentTokenCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\DeletePaymentTokenCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\PaymentMethodTokenService'] ?? self::getPaymentMethodTokenServiceService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\SavePaymentTokenCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\SavePaymentTokenCommandHandler
     */
    protected static function getSavePaymentTokenCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\CommandHandler\\SavePaymentTokenCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\CommandHandler\SavePaymentTokenCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\EventSubscriber\PaymentMethodTokenEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\EventSubscriber\PaymentMethodTokenEventSubscriber
     */
    protected static function getPaymentMethodTokenEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\EventSubscriber\\PaymentMethodTokenEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\EventSubscriber\PaymentMethodTokenEventSubscriber(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] ?? self::getPayPalOrderRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\PaymentMethodTokenService' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\PaymentMethodTokenService
     */
    protected static function getPaymentMethodTokenServiceService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\PaymentMethodTokenService'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\PaymentMethodTokenService(NULL, ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\CheckoutHttpClient'] ?? self::getCheckoutHttpClientService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\Query\GetCustomerPaymentTokensQueryHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\Query\GetCustomerPaymentTokensQueryHandler
     */
    protected static function getGetCustomerPaymentTokensQueryHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\Query\\GetCustomerPaymentTokensQueryHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\PaymentToken\Query\GetCustomerPaymentTokensQueryHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] ?? self::getPaymentTokenRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\CheckTransitionPayPalCaptureStatusService' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\CheckTransitionPayPalCaptureStatusService
     */
    protected static function getCheckTransitionPayPalCaptureStatusServiceService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\CheckTransitionPayPalCaptureStatusService'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\CheckTransitionPayPalCaptureStatusService();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\EventSubscriber\PayPalCaptureEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\EventSubscriber\PayPalCaptureEventSubscriber
     */
    protected static function getPayPalCaptureEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\EventSubscriber\\PayPalCaptureEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Capture\EventSubscriber\PayPalCaptureEventSubscriber(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\Service\\CheckOrderAmount'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\Service\CheckOrderAmount()), ($container->services['ps_checkout.cache.paypal.capture'] ?? self::getPsCheckout_Cache_Paypal_CaptureService($container)), ($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper'] ?? self::getOrderStateMapperService($container)), ($container->services['ps_checkout.bus.query'] ?? self::getPsCheckout_Bus_QueryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\CreateOrderCommandHandler'] ?? self::getCreateOrderCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\AddOrderPaymentCommandHandler'] ?? self::getAddOrderPaymentCommandHandlerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\CommandHandler\RefundPayPalCaptureCommandHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\CommandHandler\RefundPayPalCaptureCommandHandler
     */
    protected static function getRefundPayPalCaptureCommandHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\CommandHandler\\RefundPayPalCaptureCommandHandler'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\CommandHandler\RefundPayPalCaptureCommandHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\MaaslandHttpClient'] ?? self::getMaaslandHttpClientService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\EventSubscriber\\PayPalRefundEventSubscriber'] ?? self::getPayPalRefundEventSubscriberService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\EventSubscriber\PayPalRefundEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\EventSubscriber\PayPalRefundEventSubscriber
     */
    protected static function getPayPalRefundEventSubscriberService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\EventSubscriber\\PayPalRefundEventSubscriber'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Payment\Refund\EventSubscriber\PayPalRefundEventSubscriber(($container->services['ps_checkout.cache.paypal.order'] ?? self::getPsCheckout_Cache_Paypal_OrderService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\State\\Service\\OrderStateMapper'] ?? self::getOrderStateMapperService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalOrderProvider'] ?? self::getPayPalOrderProviderService($container)), ($container->services['ps_checkout.bus.query'] ?? self::getPsCheckout_Bus_QueryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\CommandHandler\\UpdateOrderStatusCommandHandler'] ??= new \PrestaShop\Module\PrestashopCheckout\Order\CommandHandler\UpdateOrderStatusCommandHandler()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\PayPal\Sdk\PayPalSdkConfigurationBuilder' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Sdk\PayPalSdkConfigurationBuilder
     */
    protected static function getPayPalSdkConfigurationBuilderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Sdk\\PayPalSdkConfigurationBuilder'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Sdk\PayPalSdkConfigurationBuilder(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env'] ?? self::getEnvService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalPayLaterConfiguration'] ?? self::getPayPalPayLaterConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceConfigurationRepository'] ?? self::getFundingSourceConfigurationRepositoryService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ExpressCheckout\\ExpressCheckoutConfiguration'] ?? self::getExpressCheckoutConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ShopContext'] ?? self::getShopContextService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['ps_checkout.logger'] ?? self::getPsCheckout_LoggerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceEligibilityConstraint'] ??= new \PrestaShop\Module\PrestashopCheckout\FundingSource\FundingSourceEligibilityConstraint()), ($container->services['ps_checkout.bus.query'] ?? self::getPsCheckout_Bus_QueryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ConfigurationModule' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ConfigurationModule
     */
    protected static function getConfigurationModuleService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ConfigurationModule'] = new \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ConfigurationModule(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalPayLaterConfiguration'] ?? self::getPayPalPayLaterConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ExpressCheckout\\ExpressCheckoutConfiguration'] ?? self::getExpressCheckoutConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\FundingSource\\FundingSourceProvider'] ?? self::getFundingSourceProviderService($container)), ($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ContextModule' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ContextModule
     */
    protected static function getContextModuleService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ContextModule'] = new \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\ContextModule(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container))->name, ($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container))->module_key, ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Context\\PrestaShopContext'] ??= new \PrestaShop\Module\PrestashopCheckout\Context\PrestaShopContext()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\LiveStep'] ?? self::getLiveStepService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\OnBoarding\\Step\\ValueBanner'] ?? self::getValueBannerService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations'] ?? self::getTranslationsService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ShopContext'] ?? self::getShopContextService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Shop\\ShopProvider'] ??= new \PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\ModuleLink\\ModuleLinkBuilder'] ??= new \PrestaShop\Module\PrestashopCheckout\Builder\ModuleLink\ModuleLinkBuilder()), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository'] ?? self::getPsAccountRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\PaypalModule' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\PaypalModule
     */
    protected static function getPaypalModuleService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\PaypalModule'] = new \PrestaShop\Module\PrestashopCheckout\Presenter\Store\Modules\PaypalModule(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Presenter\Store\StorePresenter' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Presenter\Store\StorePresenter
     */
    protected static function getStorePresenterService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\StorePresenter'] = new \PrestaShop\Module\PrestashopCheckout\Presenter\Store\StorePresenter([($container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ContextModule'] ?? self::getContextModuleService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\PaypalModule'] ?? self::getPaypalModuleService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Presenter\\Store\\Modules\\ConfigurationModule'] ?? self::getConfigurationModuleService($container))]);
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Provider\PaymentMethodLogoProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Provider\PaymentMethodLogoProvider
     */
    protected static function getPaymentMethodLogoProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Provider\\PaymentMethodLogoProvider'] = new \PrestaShop\Module\PrestashopCheckout\Provider\PaymentMethodLogoProvider(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\CountryRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\CountryRepository
     */
    protected static function getCountryRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\CountryRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\CountryRepository();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository
     */
    protected static function getPayPalCodeRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCodeRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PayPalCustomerRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCustomerRepository
     */
    protected static function getPayPalCustomerRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalCustomerRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCustomerRepository(($container->services['ps_checkout.db'] ?? self::getPsCheckout_DbService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PayPalOrderRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PayPalOrderRepository
     */
    protected static function getPayPalOrderRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PayPalOrderRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PayPalOrderRepository(($container->services['ps_checkout.db'] ?? self::getPsCheckout_DbService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PaymentTokenRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PaymentTokenRepository
     */
    protected static function getPaymentTokenRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PaymentTokenRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PaymentTokenRepository(($container->services['ps_checkout.db'] ?? self::getPsCheckout_DbService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PsAccountRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PsAccountRepository
     */
    protected static function getPsAccountRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PsAccountRepository(($container->services['ps_accounts.facade'] ?? self::getPsAccounts_FacadeService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Repository\PsCheckoutCartRepository' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PsCheckoutCartRepository
     */
    protected static function getPsCheckoutCartRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsCheckoutCartRepository'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PsCheckoutCartRepository(($container->services['ps_checkout.cache.pscheckoutcart'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Routing\Router' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Routing\Router
     */
    protected static function getRouterService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Routing\\Router'] = new \PrestaShop\Module\PrestashopCheckout\Routing\Router();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\ShopContext' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\ShopContext
     */
    protected static function getShopContextService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\ShopContext'] = new \PrestaShop\Module\PrestashopCheckout\ShopContext(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Environment\\Env'] ?? self::getEnvService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider
     */
    protected static function getShopProviderService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Shop\\ShopProvider'] = new \PrestaShop\Module\PrestashopCheckout\Shop\ShopProvider();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\System\SystemConfiguration' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\System\SystemConfiguration
     */
    protected static function getSystemConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\System\\SystemConfiguration'] = new \PrestaShop\Module\PrestashopCheckout\System\SystemConfiguration();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Translations\Translations' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Translations\Translations
     */
    protected static function getTranslationsService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Translations\\Translations'] = new \PrestaShop\Module\PrestashopCheckout\Translations\Translations(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Validator\BatchConfigurationValidator' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Validator\BatchConfigurationValidator
     */
    protected static function getBatchConfigurationValidatorService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Validator\\BatchConfigurationValidator'] = new \PrestaShop\Module\PrestashopCheckout\Validator\BatchConfigurationValidator();
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Validator\FrontControllerValidator' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Validator\FrontControllerValidator
     */
    protected static function getFrontControllerValidatorService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Validator\\FrontControllerValidator'] = new \PrestaShop\Module\PrestashopCheckout\Validator\FrontControllerValidator(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Validator\\MerchantValidator'] ?? self::getMerchantValidatorService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\ExpressCheckout\\ExpressCheckoutConfiguration'] ?? self::getExpressCheckoutConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalPayLaterConfiguration'] ?? self::getPayPalPayLaterConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Validator\MerchantValidator' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Validator\MerchantValidator
     */
    protected static function getMerchantValidatorService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Validator\\MerchantValidator'] = new \PrestaShop\Module\PrestashopCheckout\Validator\MerchantValidator(($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PayPalConfiguration'] ?? self::getPayPalConfigurationService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Repository\\PsAccountRepository'] ?? self::getPsAccountRepositoryService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Webhook\WebhookEventConfigurationUpdatedHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookEventConfigurationUpdatedHandler
     */
    protected static function getWebhookEventConfigurationUpdatedHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookEventConfigurationUpdatedHandler'] = new \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookEventConfigurationUpdatedHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Webhook\WebhookHandler' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookHandler
     */
    protected static function getWebhookHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookHandler'] = new \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookHandler(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookSecretTokenService'] ?? self::getWebhookSecretTokenServiceService($container)), [($container->services['PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookEventConfigurationUpdatedHandler'] ?? self::getWebhookEventConfigurationUpdatedHandlerService($container))]);
    }

    /**
     * Gets the public 'PrestaShop\Module\PrestashopCheckout\Webhook\WebhookSecretTokenService' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookSecretTokenService
     */
    protected static function getWebhookSecretTokenServiceService($container)
    {
        return $container->services['PrestaShop\\Module\\PrestashopCheckout\\Webhook\\WebhookSecretTokenService'] = new \PrestaShop\Module\PrestashopCheckout\Webhook\WebhookSecretTokenService(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Configuration\\PrestaShopConfiguration'] ?? self::getPrestaShopConfigurationService($container)));
    }

    /**
     * Gets the public 'ps_accounts.facade' shared service.
     *
     * @return \PrestaShop\PsAccountsInstaller\Installer\Facade\PsAccounts
     */
    protected static function getPsAccounts_FacadeService($container)
    {
        return $container->services['ps_accounts.facade'] = new \PrestaShop\PsAccountsInstaller\Installer\Facade\PsAccounts(($container->services['ps_accounts.installer'] ??= new \PrestaShop\PsAccountsInstaller\Installer\Installer('4.0.0')));
    }

    /**
     * Gets the public 'ps_accounts.installer' shared service.
     *
     * @return \PrestaShop\PsAccountsInstaller\Installer\Installer
     */
    protected static function getPsAccounts_InstallerService($container)
    {
        return $container->services['ps_accounts.installer'] = new \PrestaShop\PsAccountsInstaller\Installer\Installer('4.0.0');
    }

    /**
     * Gets the public 'ps_checkout.bus.command' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\CommandBus\CommandBusAdapter
     */
    protected static function getPsCheckout_Bus_CommandService($container)
    {
        return $container->services['ps_checkout.bus.command'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\CommandBusFactory'] ?? self::getCommandBusFactoryService($container))->create();
    }

    /**
     * Gets the public 'ps_checkout.bus.query' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\CommandBus\QueryBusAdapter
     */
    protected static function getPsCheckout_Bus_QueryService($container)
    {
        return $container->services['ps_checkout.bus.query'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\CommandBus\\QueryBusFactory'] ?? self::getQueryBusFactoryService($container))->create();
    }

    /**
     * Gets the public 'ps_checkout.cache.array.paypal.capture' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getPsCheckout_Cache_Array_Paypal_CaptureService($container)
    {
        return $container->services['ps_checkout.cache.array.paypal.capture'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the public 'ps_checkout.cache.array.paypal.order' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getPsCheckout_Cache_Array_Paypal_OrderService($container)
    {
        return $container->services['ps_checkout.cache.array.paypal.order'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the public 'ps_checkout.cache.filesystem.paypal.capture' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected static function getPsCheckout_Cache_Filesystem_Paypal_CaptureService($container)
    {
        return $container->services['ps_checkout.cache.filesystem.paypal.capture'] = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('paypal-capture', 3600, ($container->services['PrestaShop\\ModuleLibCacheDirectoryProvider\\Cache\\CacheDirectoryProvider'] ??= new \PrestaShop\ModuleLibCacheDirectoryProvider\Cache\CacheDirectoryProvider('9.0.0', '/home/playfunc/tcg', false))->getPath());
    }

    /**
     * Gets the public 'ps_checkout.cache.filesystem.paypal.order' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected static function getPsCheckout_Cache_Filesystem_Paypal_OrderService($container)
    {
        return $container->services['ps_checkout.cache.filesystem.paypal.order'] = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('paypal-orders', 3600, ($container->services['PrestaShop\\ModuleLibCacheDirectoryProvider\\Cache\\CacheDirectoryProvider'] ??= new \PrestaShop\ModuleLibCacheDirectoryProvider\Cache\CacheDirectoryProvider('9.0.0', '/home/playfunc/tcg', false))->getPath());
    }

    /**
     * Gets the public 'ps_checkout.cache.order' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getPsCheckout_Cache_OrderService($container)
    {
        return $container->services['ps_checkout.cache.order'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the public 'ps_checkout.cache.paypal.capture' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ChainAdapter
     */
    protected static function getPsCheckout_Cache_Paypal_CaptureService($container)
    {
        return $container->services['ps_checkout.cache.paypal.capture'] = new \Symfony\Component\Cache\Adapter\ChainAdapter([($container->services['ps_checkout.cache.array.paypal.capture'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()), ($container->services['ps_checkout.cache.filesystem.paypal.capture'] ?? self::getPsCheckout_Cache_Filesystem_Paypal_CaptureService($container))]);
    }

    /**
     * Gets the public 'ps_checkout.cache.paypal.order' shared service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\PayPal\Order\Cache\PayPalOrderCache
     */
    protected static function getPsCheckout_Cache_Paypal_OrderService($container)
    {
        return $container->services['ps_checkout.cache.paypal.order'] = new \PrestaShop\Module\PrestashopCheckout\PayPal\Order\Cache\PayPalOrderCache([($container->services['ps_checkout.cache.array.paypal.order'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()), ($container->services['ps_checkout.cache.filesystem.paypal.order'] ?? self::getPsCheckout_Cache_Filesystem_Paypal_OrderService($container))]);
    }

    /**
     * Gets the public 'ps_checkout.cache.pscheckoutcart' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getPsCheckout_Cache_PscheckoutcartService($container)
    {
        return $container->services['ps_checkout.cache.pscheckoutcart'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /**
     * Gets the public 'ps_checkout.db' shared autowired service.
     *
     * @return \Db
     */
    protected static function getPsCheckout_DbService($container)
    {
        return $container->services['ps_checkout.db'] = \Db::getInstance();
    }

    /**
     * Gets the public 'ps_checkout.event.dispatcher.adapter2' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherAdapter
     */
    protected static function getPsCheckout_Event_Dispatcher_Adapter2Service($container)
    {
        return $container->services['ps_checkout.event.dispatcher.adapter2'] = new \PrestaShop\Module\PrestashopCheckout\Event\SymfonyEventDispatcherAdapter(($container->services['ps_checkout.event.dispatcher.symfony2'] ?? self::getPsCheckout_Event_Dispatcher_Symfony2Service($container)));
    }

    /**
     * Gets the public 'ps_checkout.event.dispatcher.symfony' shared autowired service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
     */
    protected static function getPsCheckout_Event_Dispatcher_SymfonyService($container)
    {
        return $container->services['ps_checkout.event.dispatcher.symfony'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherFactory'] ?? self::getSymfonyEventDispatcherFactoryService($container))->create([($container->services['PrestaShop\\Module\\PrestashopCheckout\\Checkout\\EventSubscriber\\CheckoutEventSubscriber'] ?? self::getCheckoutEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Order\\EventSubscriber\\OrderEventSubscriber'] ?? self::getOrderEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Order\\EventSubscriber\\PayPalOrderEventSubscriber'] ?? self::getPayPalOrderEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\EventSubscriber\\PayPalCaptureEventSubscriber'] ?? self::getPayPalCaptureEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Refund\\EventSubscriber\\PayPalRefundEventSubscriber'] ?? self::getPayPalRefundEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\EventSubscriber\\PaymentMethodTokenEventSubscriber'] ?? self::getPaymentMethodTokenEventSubscriberService($container))]);
    }

    /**
     * Gets the public 'ps_checkout.event.dispatcher.symfony2' shared autowired service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
     */
    protected static function getPsCheckout_Event_Dispatcher_Symfony2Service($container)
    {
        return $container->services['ps_checkout.event.dispatcher.symfony2'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Event\\SymfonyEventDispatcherFactory'] ?? self::getSymfonyEventDispatcherFactoryService($container))->create([($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\Payment\\Capture\\EventSubscriber\\PayPalCaptureEventSubscriber'] ?? self::getPayPalCaptureEventSubscriberService($container)), ($container->services['PrestaShop\\Module\\PrestashopCheckout\\PayPal\\PaymentToken\\EventSubscriber\\PaymentMethodTokenEventSubscriber'] ?? self::getPaymentMethodTokenEventSubscriberService($container))]);
    }

    /**
     * Gets the public 'ps_checkout.http.client' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Http\HttpClientInterface
     */
    protected static function getPsCheckout_Http_ClientService($container)
    {
        return $container->services['ps_checkout.http.client'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Http\\HttpClientFactory'] ??= new \PrestaShop\Module\PrestashopCheckout\Http\HttpClientFactory())->create(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Builder\\Configuration\\MaaslandHttpClientConfigurationBuilder'] ?? self::getMaaslandHttpClientConfigurationBuilderService($container)));
    }

    /**
     * Gets the public 'ps_checkout.logger' shared autowired service.
     *
     * @return \Psr\Log\LoggerInterface
     */
    protected static function getPsCheckout_LoggerService($container)
    {
        return $container->services['ps_checkout.logger'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerFactory'] ?? self::getLoggerFactoryService($container))->build(($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerDirectory'] ??= new \PrestaShop\Module\PrestashopCheckout\Logger\LoggerDirectory('9.0.0', '/home/playfunc/tcg')));
    }

    /**
     * Gets the public 'ps_checkout.logger.handler' shared autowired service.
     *
     * @return \Monolog\Handler\HandlerInterface
     */
    protected static function getPsCheckout_Logger_HandlerService($container)
    {
        return $container->services['ps_checkout.logger.handler'] = ($container->services['PrestaShop\\Module\\PrestashopCheckout\\Logger\\LoggerHandlerFactory'] ?? self::getLoggerHandlerFactoryService($container))->build();
    }

    /**
     * Gets the public 'ps_checkout.module' shared autowired service.
     *
     * @return \Ps_checkout
     */
    protected static function getPsCheckout_ModuleService($container)
    {
        return $container->services['ps_checkout.module'] = \Module::getInstanceByName('ps_checkout');
    }

    /**
     * Gets the public 'ps_checkout.module.version' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Version\Version
     */
    protected static function getPsCheckout_Module_VersionService($container)
    {
        return $container->services['ps_checkout.module.version'] = \PrestaShop\Module\PrestashopCheckout\Version\Version::buildFromString(($container->services['ps_checkout.module'] ?? self::getPsCheckout_ModuleService($container))->version);
    }

    /**
     * Gets the public 'ps_checkout.repository.paypal.code' shared autowired service.
     *
     * @return \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository
     */
    protected static function getPsCheckout_Repository_Paypal_CodeService($container)
    {
        return $container->services['ps_checkout.repository.paypal.code'] = new \PrestaShop\Module\PrestashopCheckout\Repository\PayPalCodeRepository();
    }
}
