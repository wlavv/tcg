<?php

namespace ContainerXrLzW05;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCartGridDefinitionFactoryService extends AdminKernelProdContainer
{
    /*
     * Gets the public 'PrestaShop\PrestaShop\Core\Grid\Definition\Factory\CartGridDefinitionFactory' shared autowired service.
     *
     * @return \PrestaShop\PrestaShop\Core\Grid\Definition\Factory\CartGridDefinitionFactory
     *
     * @deprecated Since PrestaShop\PrestaShop 9: The "PrestaShop\PrestaShop\Core\Grid\Definition\Factory\CartGridDefinitionFactory" service is deprecated. You should stop using it, as it will be removed in the future.
     */
    public static function do($container, $lazyLoad = true)
    {
        trigger_deprecation('PrestaShop\\PrestaShop', '9', 'The "PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\CartGridDefinitionFactory" service is deprecated. You should stop using it, as it will be removed in the future.');

        $container->services['PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\CartGridDefinitionFactory'] = $instance = new \PrestaShop\PrestaShop\Core\Grid\Definition\Factory\CartGridDefinitionFactory(($container->services['PrestaShop\\PrestaShop\\Core\\Hook\\HookDispatcher'] ?? self::getHookDispatcherService($container)), ($container->services['PrestaShop\\PrestaShop\\Adapter\\Feature\\MultistoreFeature'] ?? self::getMultistoreFeatureService($container)), ($container->privates['PrestaShop\\PrestaShop\\Core\\Context\\LanguageContext'] ?? self::getLanguageContextService($container)), ($container->services['.container.private.prestashop.adapter.shop.context'] ??= new \PrestaShop\PrestaShop\Adapter\Shop\Context()), new \PrestaShop\PrestaShop\Core\Grid\Action\Row\AccessibilityChecker\DeleteCartAccessibilityChecker());

        $instance->setTranslator(($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? self::getTranslatorInterfaceService($container)));

        return $instance;
    }
}
