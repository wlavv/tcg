<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class PsshippingAdminContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingCarrierController' => 'getPsshippingCarrierControllerService',
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingConfigurationController' => 'getPsshippingConfigurationControllerService',
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingFaqController' => 'getPsshippingFaqControllerService',
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingHomeController' => 'getPsshippingHomeControllerService',
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingKeycloakAuthController' => 'getPsshippingKeycloakAuthControllerService',
            'PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingOrdersController' => 'getPsshippingOrdersControllerService',
            'PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\CarrierRepository' => 'getCarrierRepositoryService',
            'PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\PickupCarrierConfiguration' => 'getPickupCarrierConfigurationService',
            'PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\StandardCarrierConfiguration' => 'getStandardCarrierConfigurationService',
            'PrestaShop\\Module\\Psshipping\\Handler\\ErrorHandler' => 'getErrorHandlerService',
            'ps_accounts.facade' => 'getPsAccounts_FacadeService',
            'ps_accounts.installer' => 'getPsAccounts_InstallerService',
            'psshipping' => 'getPsshippingService',
            'psshipping.context' => 'getPsshipping_ContextService',
            'psshipping.helper.config' => 'getPsshipping_Helper_ConfigService',
            'psshipping.ps_billings_context_wrapper' => 'getPsshipping_PsBillingsContextWrapperService',
            'psshipping.ps_billings_facade' => 'getPsshipping_PsBillingsFacadeService',
            'psshipping.ps_billings_service' => 'getPsshipping_PsBillingsServiceService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingCarrierController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingCarrierController
     */
    protected static function getPsshippingCarrierControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingCarrierController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingCarrierController(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingConfigurationController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingConfigurationController
     */
    protected static function getPsshippingConfigurationControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingConfigurationController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingConfigurationController(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingFaqController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingFaqController
     */
    protected static function getPsshippingFaqControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingFaqController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingFaqController(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingHomeController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingHomeController
     */
    protected static function getPsshippingHomeControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingHomeController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingHomeController(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingKeycloakAuthController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingKeycloakAuthController
     */
    protected static function getPsshippingKeycloakAuthControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingKeycloakAuthController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingKeycloakAuthController();
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Controller\Admin\PsshippingOrdersController' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingOrdersController
     */
    protected static function getPsshippingOrdersControllerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Controller\\Admin\\PsshippingOrdersController'] = new \PrestaShop\Module\Psshipping\Controller\Admin\PsshippingOrdersController(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Domain\Carriers\CarrierRepository' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Domain\Carriers\CarrierRepository
     */
    protected static function getCarrierRepositoryService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\CarrierRepository'] = new \PrestaShop\Module\Psshipping\Domain\Carriers\CarrierRepository(($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Domain\Carriers\PickupCarrierConfiguration' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Domain\Carriers\PickupCarrierConfiguration
     */
    protected static function getPickupCarrierConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\PickupCarrierConfiguration'] = new \PrestaShop\Module\Psshipping\Domain\Carriers\PickupCarrierConfiguration('prestashop.core.command_bus');
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Domain\Carriers\StandardCarrierConfiguration' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Domain\Carriers\StandardCarrierConfiguration
     */
    protected static function getStandardCarrierConfigurationService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Domain\\Carriers\\StandardCarrierConfiguration'] = new \PrestaShop\Module\Psshipping\Domain\Carriers\StandardCarrierConfiguration('prestashop.core.command_bus');
    }

    /**
     * Gets the public 'PrestaShop\Module\Psshipping\Handler\ErrorHandler' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Handler\ErrorHandler
     */
    protected static function getErrorHandlerService($container)
    {
        return $container->services['PrestaShop\\Module\\Psshipping\\Handler\\ErrorHandler'] = new \PrestaShop\Module\Psshipping\Handler\ErrorHandler();
    }

    /**
     * Gets the public 'ps_accounts.facade' shared service.
     *
     * @return \PrestaShop\PsAccountsInstaller\Installer\Facade\PsAccounts
     */
    protected static function getPsAccounts_FacadeService($container)
    {
        return $container->services['ps_accounts.facade'] = new \PrestaShop\PsAccountsInstaller\Installer\Facade\PsAccounts(($container->services['ps_accounts.installer'] ??= new \PrestaShop\PsAccountsInstaller\Installer\Installer('5.0')));
    }

    /**
     * Gets the public 'ps_accounts.installer' shared service.
     *
     * @return \PrestaShop\PsAccountsInstaller\Installer\Installer
     */
    protected static function getPsAccounts_InstallerService($container)
    {
        return $container->services['ps_accounts.installer'] = new \PrestaShop\PsAccountsInstaller\Installer\Installer('5.0');
    }

    /**
     * Gets the public 'psshipping' shared service.
     *
     * @return \Psshipping
     */
    protected static function getPsshippingService($container)
    {
        return $container->services['psshipping'] = \Module::getInstanceByName('psshipping');
    }

    /**
     * Gets the public 'psshipping.context' shared service.
     *
     * @return \Context
     */
    protected static function getPsshipping_ContextService($container)
    {
        return $container->services['psshipping.context'] = \Context::getContext();
    }

    /**
     * Gets the public 'psshipping.helper.config' shared service.
     *
     * @return \PrestaShop\Module\Psshipping\Helper\ConfigHelper
     */
    protected static function getPsshipping_Helper_ConfigService($container)
    {
        return $container->services['psshipping.helper.config'] = new \PrestaShop\Module\Psshipping\Helper\ConfigHelper('https://shipping-api.prestashop.com', 'https://assets.prestashop3.com/shipping', 0, 0, 'https://www.mbe.it/en/tracking?c=@', '3XsHeI2dfKoKE2wReGp7IO2bLa5hbeVB', 'https://78c41abf489931010a3a83cacc14926b@o298402.ingest.sentry.io/4505906299600896', 'production');
    }

    /**
     * Gets the public 'psshipping.ps_billings_context_wrapper' shared service.
     *
     * @return \PrestaShopCorp\Billing\Wrappers\BillingContextWrapper
     */
    protected static function getPsshipping_PsBillingsContextWrapperService($container)
    {
        return $container->services['psshipping.ps_billings_context_wrapper'] = new \PrestaShopCorp\Billing\Wrappers\BillingContextWrapper(($container->services['ps_accounts.facade'] ?? self::getPsAccounts_FacadeService($container)), ($container->services['psshipping.context'] ?? self::getPsshipping_ContextService($container)), 0);
    }

    /**
     * Gets the public 'psshipping.ps_billings_facade' shared service.
     *
     * @return \PrestaShopCorp\Billing\Presenter\BillingPresenter
     */
    protected static function getPsshipping_PsBillingsFacadeService($container)
    {
        return $container->services['psshipping.ps_billings_facade'] = new \PrestaShopCorp\Billing\Presenter\BillingPresenter(($container->services['psshipping.ps_billings_context_wrapper'] ?? self::getPsshipping_PsBillingsContextWrapperService($container)), ($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    /**
     * Gets the public 'psshipping.ps_billings_service' shared service.
     *
     * @return \PrestaShopCorp\Billing\Services\BillingService
     */
    protected static function getPsshipping_PsBillingsServiceService($container)
    {
        return $container->services['psshipping.ps_billings_service'] = new \PrestaShopCorp\Billing\Services\BillingService(($container->services['psshipping.ps_billings_context_wrapper'] ?? self::getPsshipping_PsBillingsContextWrapperService($container)), ($container->services['psshipping'] ?? self::getPsshippingService($container)));
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'psshipping.sentry_dsn' => 'https://78c41abf489931010a3a83cacc14926b@o298402.ingest.sentry.io/4505906299600896',
            'psshipping.sentry_env' => 'production',
            'psshipping.ps_billing_sandbox' => 0,
            'psshipping.vue_app_dev_mode' => 0,
            'psshipping.cdn_url' => 'https://assets.prestashop3.com/shipping',
            'psshipping.api_url' => 'https://shipping-api.prestashop.com',
            'psshipping.cloudsync_cdc_url' => 'https://assets.prestashop3.com/ext/cloudsync-merchant-sync-consent/latest/cloudsync-cdc.js',
            'psshipping.use_local_vue_app' => 0,
            'psshipping.mbe_tracking_url' => 'https://www.mbe.it/en/tracking?c=@',
            'psshipping.segment_key' => '3XsHeI2dfKoKE2wReGp7IO2bLa5hbeVB',
        ];
    }
}
