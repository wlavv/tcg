<?php

namespace ContainerMuK0XhM;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUpdateProductTypeHandlerService extends AdminKernelDevDebugContainer
{
    /**
     * Gets the public 'PrestaShop\PrestaShop\Adapter\Product\CommandHandler\UpdateProductTypeHandler' shared service.
     *
     * @return \PrestaShop\PrestaShop\Adapter\Product\CommandHandler\UpdateProductTypeHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->services['PrestaShop\\PrestaShop\\Adapter\\Product\\CommandHandler\\UpdateProductTypeHandler'] = new \PrestaShop\PrestaShop\Adapter\Product\CommandHandler\UpdateProductTypeHandler(new \PrestaShop\PrestaShop\Adapter\Product\Update\ProductTypeUpdater(($container->services['PrestaShop\\PrestaShop\\Adapter\\Product\\Repository\\ProductRepository'] ?? $container->load('getProductRepository3Service')), ($container->privates['PrestaShop\\PrestaShop\\Adapter\\Product\\Pack\\Update\\ProductPackUpdater'] ?? $container->load('getProductPackUpdaterService')), ($container->privates['PrestaShop\\PrestaShop\\Adapter\\Product\\Combination\\Update\\CombinationDeleter'] ?? $container->load('getCombinationDeleterService')), ($container->privates['PrestaShop\\PrestaShop\\Adapter\\Product\\VirtualProduct\\Update\\VirtualProductUpdater'] ?? $container->load('getVirtualProductUpdaterService')), ($container->privates['PrestaShop\\PrestaShop\\Adapter\\Product\\Stock\\Update\\ProductStockUpdater'] ?? $container->load('getProductStockUpdaterService')), ($container->services['PrestaShop\\PrestaShop\\Adapter\\Product\\Pack\\Repository\\ProductPackRepository'] ?? $container->load('getProductPackRepositoryService'))));
    }
}
