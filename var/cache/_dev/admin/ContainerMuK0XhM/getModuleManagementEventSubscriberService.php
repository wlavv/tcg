<?php

namespace ContainerMuK0XhM;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getModuleManagementEventSubscriberService extends AdminKernelDevDebugContainer
{
    /**
     * Gets the public 'PrestaShop\Module\Mbo\Addons\Subscriber\ModuleManagementEventSubscriber' shared autowired service.
     *
     * @return \PrestaShop\Module\Mbo\Addons\Subscriber\ModuleManagementEventSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['PrestaShop\\Module\\Mbo\\Module\\Repository'] ?? $container->load('getRepository2Service'));

        if (isset($container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'])) {
            return $container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'];
        }
        $b = ($container->services['PrestaShop\\Module\\Mbo\\Tab\\TabCollectionProvider'] ?? $container->load('getTabCollectionProviderService'));

        if (isset($container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'])) {
            return $container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'];
        }
        $c = ($container->services['PrestaShop\\Module\\Mbo\\Service\\View\\ContextBuilder'] ?? $container->load('getContextBuilderService'));

        if (isset($container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'])) {
            return $container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'];
        }

        return $container->services['PrestaShop\\Module\\Mbo\\Addons\\Subscriber\\ModuleManagementEventSubscriber'] = new \PrestaShop\Module\Mbo\Addons\Subscriber\ModuleManagementEventSubscriber(($container->services['logger'] ?? self::getLoggerService($container)), $a, $b, $c, ($container->services['PrestaShop\\Module\\Mbo\\Distribution\\Client'] ?? $container->load('getClientService')), ($container->services['PrestaShop\\Module\\Mbo\\Api\\Security\\AdminAuthenticationProvider'] ?? $container->load('getAdminAuthenticationProviderService')), ($container->services['PrestaShop\\Module\\Mbo\\Distribution\\Config\\CommandHandler\\VersionChangeApplyConfigCommandHandler'] ?? $container->load('getVersionChangeApplyConfigCommandHandlerService')));
    }
}
