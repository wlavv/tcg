<?php

namespace ContainerKctP96m;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPrestashop_Core_Grid_Definition_Factory_ProductService extends AdminKernelDevDebugContainer
{
    /**
     * Gets the public 'prestashop.core.grid.definition.factory.product' shared service.
     *
     * @return \PrestaShop\PrestaShop\Core\Grid\Definition\Factory\ProductGridDefinitionFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->privates['form.factory'] ?? $container->load('getForm_FactoryService'));

        if (isset($container->services['prestashop.core.grid.definition.factory.product'])) {
            return $container->services['prestashop.core.grid.definition.factory.product'];
        }

        $container->services['prestashop.core.grid.definition.factory.product'] = $instance = new \PrestaShop\PrestaShop\Core\Grid\Definition\Factory\ProductGridDefinitionFactory(($container->services['PrestaShop\\PrestaShop\\Core\\Hook\\HookDispatcher'] ?? self::getHookDispatcherService($container)), ($container->services['PrestaShop\\PrestaShop\\Adapter\\Configuration'] ??= new \PrestaShop\PrestaShop\Adapter\Configuration()), ($container->services['PrestaShop\\PrestaShop\\Adapter\\Feature\\MultistoreFeature'] ?? self::getMultistoreFeatureService($container)), ($container->services['.container.private.prestashop.adapter.shop.context'] ??= new \PrestaShop\PrestaShop\Adapter\Shop\Context()), $a, ($container->privates['PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\AccessibilityChecker\\ProductSingleShopAssociatedAccessibilityChecker'] ?? $container->load('getProductSingleShopAssociatedAccessibilityCheckerService')), ($container->privates['PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\AccessibilityChecker\\ProductMultipleShopsAssociatedAccessibilityChecker'] ?? $container->load('getProductMultipleShopsAssociatedAccessibilityCheckerService')));

        $instance->setTranslator(($container->services['Symfony\\Contracts\\Translation\\TranslatorInterface'] ?? self::getTranslatorInterfaceService($container)));

        return $instance;
    }
}
